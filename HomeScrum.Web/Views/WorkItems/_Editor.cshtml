@using HomeScrum.Web.Extensions

@model HomeScrum.Web.Models.WorkItems.WorkItemEditorViewModel

@using (Html.BeginForm( null, null, null, FormMethod.Post, new { id = "Editor" } ))
{
   @Html.Partial( "_DomainObjectBaseEditor", Model )

   <fieldset>
      <legend>Properties</legend>

      <div class="formSelectList">
         @Html.LabelFor( model => model.Points )
         @Html.TextBoxFor( model => model.Points, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.Points )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.PointsRemaining )
         @Html.TextBoxFor( model => model.PointsRemaining, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.PointsRemaining )
      </div>

      <div class="formStaticText">
         @Html.LabelFor( model => model.CreatedByUserUserName )
         @Html.DisplayFor( model => model.CreatedByUserUserName )
         @Html.HiddenFor( model => model.CreatedByUserId )
         @Html.ValidationMessageFor( model => model.CreatedByUserId )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.WorkItemTypeId )
         @Html.DropDownListWithDataAttributesFor( model => model.WorkItemTypeId, Model.WorkItemTypes, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.WorkItemTypeId )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.StatusId )
         @Html.DropDownListWithDataAttributesFor( model => model.StatusId, Model.Statuses, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.StatusId )
      </div>

      <div class="formSelectList" id="ParentWorkItemDiv">
         @Html.LabelFor( model => model.ParentWorkItemId )
         @Html.DropDownListWithDataAttributesFor( model => model.ParentWorkItemId, Model.ProductBacklogItems, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.ParentWorkItemId )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.ProjectId )
         @Html.DropDownListFor( model => model.ProjectId, Model.Projects, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.ProjectId )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.SprintId )
         @Html.DropDownListWithDataAttributesFor( model => model.SprintId, Model.Sprints, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.SprintId )
      </div>

      <div class="formSelectList" id="AssignedToUserDiv">
         @Html.LabelFor( model => model.AssignedToUserId )
         @Html.DropDownListFor( model => model.AssignedToUserId, Model.AssignedToUsers, new { @class = "MainData" } )
         @Html.ValidationMessageFor( model => model.AssignedToUserId )
      </div>

      @Html.HiddenFor( m => m.Mode )
   </fieldset>

   <div id="TaskListDiv" class="ChildData">
      <fieldset>
         <h3>Tasks</h3>
         <table>
            <tr>
               <th>
                  @Html.DisplayNameFor( model => model.WorkItemTypeId )
               </th>
               <th>
                  @Html.DisplayNameFor( model => model.Name )
               </th>
               <th>
                  @Html.DisplayNameFor( model => model.StatusId )
               </th>
               <th></th>
            </tr>

            @foreach (var item in Model.Tasks)
            {
               var rowClass = item.IsComplete ? "CompletedItemRow" : "NotCompletedItemRow";

               <tr id="@Html.AttributeEncode( item.Id.ToString() )" class="@rowClass">
                  <td>
                     @Html.DisplayFor( modelItem => item.WorkItemTypeName )
                  </td>
                  <td>
                     @Html.ActionLink( item.Name, "Edit", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() } )
                  </td>
                  <td>
                     @Html.DisplayFor( modelItem => item.StatusName )
                  </td>
                  <td>
                     @Html.ActionLink( "Remove", "RemoveParent", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() },
                           new { Class = "action add", title = "Removes the work item from this list, but does not delete the work item." } )
                  </td>
               </tr>
            }
         </table>
      </fieldset>
   </div>

   @Html.ValidationSummary( false )
}

<a href="#" id="SubmitButton"></a>
@Html.ActionLink( "Add New Task", "Create", new { parentId = Model.Id.ToString(), callingAction = "Edit", callingId = Model.Id.ToString() }, new { id = "CreateNewTask" } )

@Scripts.Render( "~/Bundles/BaseScripts" )
@Scripts.Render( "~/bundles/workItemScripts" )

<script>
   $(document).ready(function () {
      Editor.init();

      $("#CreateNewTask").button();
   });
</script>