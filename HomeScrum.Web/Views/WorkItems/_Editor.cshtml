@using HomeScrum.Web.Extensions
@model HomeScrum.Web.Models.WorkItems.WorkItemEditorViewModel

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm( null, null, null, FormMethod.Post, new { id = "Editor", @class = "form-horizontal", role = "form" } ))
{
   @Html.Partial( "_DomainObjectBaseEditor", Model )

   <fieldset>
      <legend class="hidden">Properties</legend>

      <div class="form-group">
         @Html.LabelFor( model => model.Points, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.TextBoxFor( model => model.Points, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.Points )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.PointsRemaining, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.TextBoxFor( model => model.PointsRemaining, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.PointsRemaining )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.CreatedByUserUserName, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DisplayFor( model => model.CreatedByUserUserName )
            @Html.HiddenFor( model => model.CreatedByUserId )
            @Html.ValidationMessageFor( model => model.CreatedByUserId )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.WorkItemTypeId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListWithDataAttributesFor( model => model.WorkItemTypeId, Model.WorkItemTypes, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.WorkItemTypeId )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.StatusId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListWithDataAttributesFor( model => model.StatusId, Model.Statuses, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.StatusId )
         </div>
      </div>

      <div class="form-group" id="ParentWorkItemDiv">
         @Html.LabelFor( model => model.ParentWorkItemId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListWithDataAttributesFor( model => model.ParentWorkItemId, Model.ProductBacklogItems, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.ParentWorkItemId )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.ProjectId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListFor( model => model.ProjectId, Model.Projects, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.ProjectId )
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor( model => model.SprintId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListWithDataAttributesFor( model => model.SprintId, Model.Sprints, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.SprintId )
         </div>
      </div>

      <div class="form-group" id="AssignedToUserDiv">
         @Html.LabelFor( model => model.AssignedToUserId, new { @class = "col-sm-2 control-label" } )
         <div class="col-sm-6">
            @Html.DropDownListFor( model => model.AssignedToUserId, Model.AssignedToUsers, new { @class = "MainData form-control" } )
            @Html.ValidationMessageFor( model => model.AssignedToUserId )
         </div>
      </div>

      @Html.HiddenFor( m => m.Mode )
   </fieldset>

   <div id="TaskListDiv" class="ChildData">
      <fieldset>
         <h3>Tasks</h3>
         <table class="dataTableList table table-striped table-bordered">
            <thead>
               <tr>
                  <th>
                     @Html.DisplayNameFor( model => model.WorkItemTypeId )
                  </th>
                  <th>
                     @Html.DisplayNameFor( model => model.Name )
                  </th>
                  <th>
                     @Html.DisplayNameFor( model => model.StatusId )
                  </th>
                  <th></th>
               </tr>
            </thead>

            <tbody>
               @foreach (var item in Model.Tasks)
               {
                  var rowClass = item.IsComplete ? "CompletedItemRow" : "NotCompletedItemRow";

                  <tr id="@Html.AttributeEncode( item.Id.ToString() )" class="@rowClass">
                     <td>
                        @Html.DisplayFor( modelItem => item.WorkItemTypeName )
                     </td>
                     <td>
                        @Html.ActionLink( item.Name, "Edit", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() } )
                     </td>
                     <td>
                        @Html.DisplayFor( modelItem => item.StatusName )
                     </td>
                     <td>
                        @Html.ActionLink( "Remove", "RemoveParent", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() },
                           new { Class = "action add", title = "Removes the work item from this list, but does not delete the work item." } )
                     </td>
                  </tr>
               }
            </tbody>
         </table>
      </fieldset>
   </div>

   @Html.ValidationSummary( false )
   @Html.Partial( "_EditorButtonArea", Model )
}

@section Scripts {
   @Scripts.Render( "~/bundles/jqueryval" )
   @Scripts.Render( "~/bundles/workItemScripts" )
}

<script>
   $(document).ready(function () {
      Editor.init();
   });
</script>