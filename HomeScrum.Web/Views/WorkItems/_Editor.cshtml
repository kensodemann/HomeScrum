@using HomeScrum.Web.Extensions

@model HomeScrum.Web.Models.WorkItems.WorkItemEditorViewModel

@using (Html.BeginForm())
{
   @Html.Partial( "_DomainObjectBaseEditor", Model )

   <fieldset>
      <legend>Properties</legend>

      <div class="formStaticText">
         @Html.LabelFor( model => model.CreatedByUserUserName )
         @Html.DisplayFor( model => model.CreatedByUserUserName )
         @Html.HiddenFor( model => model.CreatedByUserId )
         @Html.ValidationMessageFor( model => model.CreatedByUserId )
      </div>

      <div class="formSelectList">
         @Html.HiddenFor( x => x.WorkItemTypeId )
         @Html.LabelFor( model => model.WorkItemTypeId )
         @Html.DropDownListWithDataAttributesFor( model => model.SelectWorkItemTypeId, Model.WorkItemTypes )
         @Html.ValidationMessageFor( model => model.WorkItemTypeId )
      </div>

      <div class="formSelectList">
         @Html.LabelFor( model => model.StatusId )
         @Html.DropDownListWithDataAttributesFor( model => model.StatusId, Model.Statuses )
         @Html.ValidationMessageFor( model => model.StatusId )
      </div>

      <div class="formSelectList" id="ParentWorkItemDiv">
         @Html.HiddenFor( model => model.ParentWorkItemId )
         @Html.LabelFor( model => model.ParentWorkItemId )
         @Html.DropDownListWithDataAttributesFor( model => model.SelectParentWorkItemId, Model.ProductBacklogItems )
         @Html.ValidationMessageFor( model => model.ParentWorkItemId )
      </div>

      <div class="formSelectList">
         @Html.HiddenFor( model => model.SprintId )
         @Html.LabelFor( model => model.SprintId )
         @Html.DropDownListWithDataAttributesFor( model => model.SelectSprintId, Model.Sprints )
         @Html.ValidationMessageFor( model => model.SprintId )
      </div>

      <div class="formSelectList">
         @Html.HiddenFor( model => model.ProjectId )
         @Html.LabelFor( model => model.ProjectId )
         @Html.DropDownListFor( model => model.SelectProjectId, Model.Projects )
         @Html.ValidationMessageFor( model => model.ProjectId )
      </div>

      <div class="formSelectList" id="AssignedToUserDiv">
         @Html.HiddenFor( model => model.AssignedToUserId )
         @Html.LabelFor( model => model.AssignedToUserId )
         @Html.DropDownListFor( model => model.SelectAssignedToUserId, Model.AssignedToUsers )
         @Html.ValidationMessageFor( model => model.AssignedToUserId )
      </div>

   </fieldset>
    
   <div id="TaskListDiv">
      <h3>Tasks</h3>
      <table>
         <tr>
            <th>
               @Html.DisplayNameFor( model => model.WorkItemTypeId )
            </th>
            <th>
               @Html.DisplayNameFor( model => model.Name )
            </th>
            <th>
               @Html.DisplayNameFor( model => model.StatusName )
            </th>
            <th></th>
         </tr>

         @foreach (var item in Model.Tasks)
         {
            var rowClass = item.IsComplete ? "CompletedItemRow" : "NotCompletedItemRow";
        
            <tr id="@Html.AttributeEncode( item.Id.ToString() )" class="@rowClass">
               <td>
                  @Html.DisplayFor( modelItem => item.WorkItemTypeName )
               </td>
               <td>
                  @Html.DisplayFor( modelItem => item.Name )
               </td>
               <td>
                  @Html.DisplayFor( modelItem => item.StatusName )
               </td>
               <td>
                  @Html.ActionLink( "Edit", "Edit", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() } ) |
                        @Html.ActionLink( "Details", "Details", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() } ) |
                        @Html.ActionLink( "Remove", "RemoveParent", new { id = item.Id, callingAction = "Edit", callingId = Model.Id.ToString() },
                           new { Class = "action add", title = "Removes the work item from this list, but does not delete the work item." } )
               </td>
            </tr>
         }
      </table>
   </div>
   
   @Html.ValidationSummary( false )
 
   <p>
      <input type="submit" value="@ViewBag.EditorButtonLabel" />
      @Html.ActionLink( "Add New Task", "Create", new { parentId = Model.Id.ToString(), callingAction = "Edit", callingId = Model.Id.ToString() }, new { id = "CreateNewTask" } )
   </p>
    
   <script>
      function ShowHideAssigned(effect) {
         var canBeAssigned = $("#SelectWorkItemTypeId").find(":selected").attr("data-CanBeAssigned");
         if (canBeAssigned == "True") {
            $("#AssignedToUserDiv").show(effect);
         }
         else {
            $("#AssignedToUserDiv").hide(effect);
         }
      }

      function ShowHideParentWorkItem(effect) {
         var canHaveParent = $("#SelectWorkItemTypeId").find(":selected").attr("data-CanHaveParent");
         if (canHaveParent == "True") {
            $("#ParentWorkItemDiv").show(effect);
         }
         else {
            $("#ParentWorkItemDiv").hide(effect);
         }
      }

      function ShowHideTaskList(effect) {
         var canHaveChildren = $("#SelectWorkItemTypeId").find(":selected").attr("data-CanHaveChildren");
         if (canHaveChildren == "True") {
            $("#TaskListDiv").show(effect);
            $("#CreateNewTask").show(effect);
         }
         else {
            $("#TaskListDiv").hide(effect);
            $("#CreateNewTask").hide(effect);
         }
      }

      function ShowHideDataItems(effect) {
         ShowHideAssigned(effect);
         ShowHideParentWorkItem(effect);
         ShowHideTaskList(effect);
      }

      function SyncHiddenElement(fromElement) {
         var hiddenElementId = fromElement.id.substr(6);
         $("#" + hiddenElementId).val($(fromElement).val());
      }

      function SetProjectToParentWorkItemProject() {
         var selectedProject = $("#SelectProjectId").val();
         var backlogProject = $("#SelectParentWorkItemId").find(":selected").attr("data-ProjectId");
         if (selectedProject != backlogProject &&
             backlogProject != "00000000-0000-0000-0000-000000000000") {
            $("#SelectProjectId").val(backlogProject);
            $("#ProjectId").val(backlogProject);
         }
      }

      function SetSprintToParentWorkItemSprint() {
         var selectedSprint = $("#SelectSprintId").val();
         var backlogSprint = $("#SelectParentWorkItemId").find(":selected").attr("data-SprintId");
         if (selectedSprint != backlogSprint &&
             backlogSprint != "00000000-0000-0000-0000-000000000000") {
            $("#SelectSprintId").val(backlogSprint);
            $("#SprintId").val(backlogSprint);
         }
      }

      function SetProjectToSprintProject() {
         var selectedProject = $("#SelectProjectId").val();
         var sprintProject = $("#SelectSprintId").find(":selected").attr("data-ProjectId");
         if (selectedProject != sprintProject &&
             sprintProject != "00000000-0000-0000-0000-000000000000") {
            $("#SelectProjectId").val(backlogProject);
            $("#ProjectId").val(sprintProject);
         }
      }

      function WorkItemIsClosed() {
         var statusIsOpen = $("#StatusId").find(":selected").attr("data-IsOpenStatus");
         return (statusIsOpen == "False");
      }

      function TaskListIsClosed() {
         var taskListIsClosed = $("#SelectSprintId").find(":selected").attr("data-TaskListIsClosed");
         return (taskListIsClosed == "True");
      }


      function SetNameAccess() {
         if (WorkItemIsClosed()) {
            $("#Name").prop('readonly', true);
            $("#Name").addClass("disabled");
         }
         else {
            $("#Name").prop('readonly', false);
            $("#Name").removeClass("disabled");
         }
      }

      function SetDescriptionAccess() {
         if (WorkItemIsClosed()) {
            $("#Description").prop('readonly', true);
            $("#Description").addClass("disabled");
         }
         else {
            $("#Description").prop('readonly', false);
            $("#Description").removeClass("disabled");
         }
      }

      function SetWorkItemTypeAccess() {
         if (WorkItemIsClosed()) {
            $("#SelectWorkItemTypeId").prop('disabled', true);
         }
         else {
            $("#SelectWorkItemTypeId").prop('disabled', false);
         }
      }

      function SetAssignedToUserAccess() {
         if (WorkItemIsClosed()) {
            $("#SelectAssignedToUserId").prop('disabled', true);
         }
         else {
            $("#SelectAssignedToUserId").prop('disabled', false);
         }
      }

      function SetParentWorkItemAccess() {
         if (WorkItemIsClosed()) {
            $("#SelectParentWorkItemId").prop('disabled', true);
         }
         else {
            $("#SelectParentWorkItemId").prop('disabled', false);
         }
      }

      function SetSprintListAccess() {
         var backlogItem = $("#SelectParentWorkItemId").val();
         if (backlogItem != "00000000-0000-0000-0000-000000000000" || WorkItemIsClosed()) {
            $("#SelectSprintId").prop('disabled', true);
         }
         else {
            $("#SelectSprintId").prop('disabled', false);
         }
      }

      function SetProjectListAccess() {
         var backlogItem = $("#SelectParentWorkItemId").val();
         var sprint = $("#SelectSprintId").val();
         if (backlogItem != "00000000-0000-0000-0000-000000000000" ||
             sprint != "00000000-0000-0000-0000-000000000000" ||
             WorkItemIsClosed()) {
            $("#SelectProjectId").prop('disabled', true);
         }
         else {
            $("#SelectProjectId").prop('disabled', false);
         }
      }

      function SetCreateNewTaskAccess() {
         if (WorkItemIsClosed() || TaskListIsClosed()) {
            $("#CreateNewTask").button("disable");
         }
         else {
            $("#CreateNewTask").button("enable");
         }
      }

      function SetListItemsAccess() {
         SetCreateNewTaskAccess();
         SetNameAccess();
         SetDescriptionAccess();
         SetAssignedToUserAccess();
         SetProjectListAccess();
         SetWorkItemTypeAccess();
         SetSprintListAccess();
         SetParentWorkItemAccess();
      }

      $(function () {
         $("#CreateNewTask").button();

         ShowHideDataItems();
         SetListItemsAccess();

         $("#StatusId").change(function () {
            SetListItemsAccess();
         });

         $("#SelectWorkItemTypeId").change(function () {
            SyncHiddenElement(this);
            ShowHideDataItems("fade");
         });

         $("#SelectParentWorkItemId").change(function () {
            SyncHiddenElement(this);
            SetSprintToParentWorkItemSprint();
            SetProjectToParentWorkItemProject();
            SetListItemsAccess();
         });

         $("#SelectSprintId").change(function () {
            SyncHiddenElement(this);
            SetProjectToSprintProject();
            SetListItemsAccess();
         });

         $("#SelectAssignedToUserId").change(function () {
            SyncHiddenElement(this);
         });

         $("#SelectProjectId").change(function () {
            SyncHiddenElement(this);
         });
      });
   </script>
}